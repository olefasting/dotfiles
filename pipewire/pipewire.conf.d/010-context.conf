context = {
	spa-libs = {
	    audio.convert.* = audioconvert/libspa-audioconvert
	    avb.*           = avb/libspa-avb
	    api.alsa.*      = alsa/libspa-alsa
	    api.v4l2.*      = v4l2/libspa-v4l2
	    api.libcamera.* = libcamera/libspa-libcamera
	    api.bluez5.*    = bluez5/libspa-bluez5
	    api.vulkan.*    = vulkan/libspa-vulkan
	    api.jack.*      = jack/libspa-jack
	    support.*       = support/libspa-support
	    video.convert.* = videoconvert/libspa-videoconvert
	},
	modules = [
	    #{ name = MODULENAME
	    #    ( args  = { KEY = VALUE ... } )
	    #    ( flags = [ ( ifexists ) ( nofail ) ] )
	    #    ( condition = [ { KEY = VALUE ... } ... ] )
	    #}
	    #
	],
	objects = [
	    # { factory = <factory-name>
	    #    ( args  = { <key> = <value> ... } )
	    #    ( flags = [ ( nofail ) ] )
	    #    ( condition = [ { <key> = <value> ... } ... ] )
	    # },
	    # { factory = spa-node-factory
		# args = {
		#   factory.name    = support.node.driver
		#   node.name       = Dummy-Driver
		#   node.group      = pipewire.dummy
		#   priority.driver = 20000
		# },
		# condition = [ { core.daemon = true } ]
		# }
	],
	exec = [
	    # {   path = <program-name>
	    #    ( args = "<arguments>" | [ <arg1> <arg2> ... ] )
	    #    ( condition = [ { <key> = <value> ... } ... ] )
	    # },
		# { path = "pactl" args = "load-module module-always-sink" }
	],
	properties.rules = [
	    {   matches = [ { cpu.vm.name = !null } ]
	        actions = {
	            update-props = {
	                # These overrides are only applied when running in a vm.
	                default.clock.min-quantum = 1024
	            }
	        }
	    }
	]
}
